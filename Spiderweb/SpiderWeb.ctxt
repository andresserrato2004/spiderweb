#BlueJ class context
comment0.target=SpiderWeb
comment0.text=\r\n\ Clase\ que\ representa\ una\ red\ de\ telara\u00F1a\ con\ puentes\ y\ puntos\ de\ referencia.\r\n\ Esta\ clase\ permite\ agregar,\ eliminar\ y\ reubicar\ puentes\ y\ puntos\ de\ referencia,\r\n\ as\u00ED\ como\ tambi\u00E9n\ mover\ una\ ara\u00F1a\ a\ lo\ largo\ de\ los\ puentes.\r\n\ <p>\r\n\ La\ red\ de\ telara\u00F1a\ est\u00E1\ formada\ por\ una\ serie\ de\ l\u00EDneas\ que\ representan\ los\ brazos\r\n\ de\ la\ telara\u00F1a,\ y\ puentes\ que\ conectan\ estos\ brazos.\ Los\ puentes\ pueden\ ser\ de\ diferentes\r\n\ colores\ y\ se\ pueden\ agregar\ a\ una\ posici\u00F3n\ espec\u00EDfica\ de\ un\ brazo.\r\n\ <p>\r\n\ Los\ puntos\ de\ referencia\ son\ tambi\u00E9n\ l\u00EDneas,\ y\ se\ pueden\ agregar\ a\ un\ brazo\ para\ indicar\r\n\ un\ punto\ de\ inter\u00E9s.\r\n\r\n\ @author\ Andres\ Serrato-Zayra\ Gutierrez\r\n\ @version\ 18/02/2024\r\n
comment1.params=radio\ strands
comment1.target=SpiderWeb(int,\ int)
comment1.text=\r\n\ Constructor\ de\ la\ clase\ spiderWeb.\r\n\ Crea\ una\ nueva\ red\ de\ telara\u00F1a\ con\ el\ radio\ y\ la\ cantidad\ de\ brazos\ especificados.\r\n\r\n\ @param\ radio\ \ \ El\ radio\ de\ la\ telara\u00F1a.\r\n\ @param\ strands\ La\ cantidad\ de\ brazos\ de\ la\ telara\u00F1a.\r\n
comment10.params=color\ distance\ firstStrand\ showMessage
comment10.target=boolean\ verifyBridge(java.lang.String,\ int,\ int,\ boolean)
comment10.text=\r\n\ This\ method\ is\ used\ to\ verify\ if\ a\ bridge\ can\ be\ added\ to\ the\ spider\ web.\r\n\ It\ checks\ if\ the\ color\ of\ the\ bridge\ already\ exists,\ if\ the\ strand\ number\ is\ valid,\ and\ if\ the\ distance\ is\ valid.\r\n\ It\ also\ checks\ if\ there\ is\ already\ a\ bridge\ at\ the\ same\ distance\ on\ the\ current,\ previous,\ and\ next\ strand.\r\n\ If\ any\ of\ these\ checks\ fail,\ the\ method\ returns\ false,\ indicating\ that\ the\ bridge\ cannot\ be\ added.\r\n\ If\ all\ checks\ pass,\ the\ method\ returns\ true,\ indicating\ that\ the\ bridge\ can\ be\ added.\r\n\r\n\ @param\ color\ The\ color\ of\ the\ bridge\ to\ be\ added.\r\n\ @param\ distance\ The\ distance\ from\ the\ center\ of\ the\ web\ to\ the\ start\ of\ the\ bridge.\r\n\ @param\ firstStrand\ The\ strand\ number\ where\ the\ bridge\ starts.\r\n\ @param\ showMessage\ A\ boolean\ flag\ indicating\ if\ a\ message\ should\ be\ shown\ when\ a\ check\ fails.\r\n\ @return\ A\ boolean\ value\ indicating\ if\ the\ bridge\ can\ be\ added\ (true)\ or\ not\ (false).\r\n
comment11.params=color\ showMessage
comment11.target=boolean\ isColorExists(java.lang.String,\ boolean)
comment11.text=\r\n\ This\ method\ checks\ if\ a\ bridge\ of\ a\ certain\ color\ already\ exists\ in\ the\ spider\ web.\r\n\ If\ a\ bridge\ of\ the\ same\ color\ exists,\ it\ shows\ a\ message\ and\ returns\ true.\r\n\ If\ no\ bridge\ of\ the\ same\ color\ exists,\ it\ returns\ false.\r\n\r\n\ @param\ color\ The\ color\ of\ the\ bridge\ to\ be\ checked.\r\n\ @param\ showMessage\ A\ boolean\ flag\ indicating\ if\ a\ message\ should\ be\ shown\ when\ a\ bridge\ of\ the\ same\ color\ exists.\r\n\ @return\ A\ boolean\ value\ indicating\ if\ a\ bridge\ of\ the\ same\ color\ exists\ (true)\ or\ not\ (false).\r\n
comment12.params=strand\ showMessage
comment12.target=boolean\ isStrandValid(int,\ boolean)
comment12.text=\r\n\ This\ method\ checks\ if\ a\ strand\ number\ is\ valid.\r\n\ If\ the\ strand\ number\ is\ not\ within\ the\ range\ of\ existing\ strands,\ it\ shows\ a\ message\ and\ returns\ false.\r\n\ If\ the\ strand\ number\ is\ valid,\ it\ returns\ true.\r\n\r\n\ @param\ strand\ The\ strand\ number\ to\ be\ checked.\r\n\ @param\ showMessage\ A\ boolean\ flag\ indicating\ if\ a\ message\ should\ be\ shown\ when\ the\ strand\ number\ is\ not\ valid.\r\n\ @return\ A\ boolean\ value\ indicating\ if\ the\ strand\ number\ is\ valid\ (true)\ or\ not\ (false).\r\n
comment13.params=distance\ showMessage
comment13.target=boolean\ isDistanceValid(int,\ boolean)
comment13.text=\r\n\ This\ method\ checks\ if\ a\ distance\ value\ is\ valid.\r\n\ If\ the\ distance\ is\ not\ within\ the\ range\ of\ the\ spider\ web's\ radius,\ it\ shows\ a\ message\ and\ returns\ false.\r\n\ If\ the\ distance\ is\ valid,\ it\ returns\ true.\r\n\r\n\ @param\ distance\ The\ distance\ to\ be\ checked.\r\n\ @param\ showMessage\ A\ boolean\ flag\ indicating\ if\ a\ message\ should\ be\ shown\ when\ the\ distance\ is\ not\ valid.\r\n\ @return\ A\ boolean\ value\ indicating\ if\ the\ distance\ is\ valid\ (true)\ or\ not\ (false).\r\n
comment14.params=strand\ distance\ showMessage
comment14.target=boolean\ isBridgeExistsAtDistance(int,\ int,\ boolean)
comment14.text=\r\n\ This\ method\ checks\ if\ a\ bridge\ already\ exists\ at\ a\ certain\ distance\ on\ a\ certain\ strand.\r\n\ If\ a\ bridge\ exists\ at\ the\ same\ distance\ on\ the\ strand,\ it\ shows\ a\ message\ and\ returns\ true.\r\n\ If\ no\ bridge\ exists\ at\ the\ same\ distance\ on\ the\ strand,\ it\ returns\ false.\r\n\r\n\ @param\ strand\ The\ strand\ number\ to\ be\ checked.\r\n\ @param\ distance\ The\ distance\ to\ be\ checked.\r\n\ @param\ showMessage\ A\ boolean\ flag\ indicating\ if\ a\ message\ should\ be\ shown\ when\ a\ bridge\ exists\ at\ the\ same\ distance\ on\ the\ strand.\r\n\ @return\ A\ boolean\ value\ indicating\ if\ a\ bridge\ exists\ at\ the\ same\ distance\ on\ the\ strand\ (true)\ or\ not\ (false).\r\n
comment15.params=message\ showMessage
comment15.target=void\ showMessage(java.lang.String,\ boolean)
comment16.params=color\ distance
comment16.target=void\ relocateBridge(java.lang.String,\ float)
comment16.text=\r\n\ Relocaliza\ un\ puente\ existente\ en\ la\ red\ de\ telara\u00F1a.\r\n\r\n\ @param\ color\ \ \ \ El\ color\ del\ puente\ que\ se\ desea\ relocalizar.\r\n\ @param\ distance\ La\ nueva\ distancia\ desde\ el\ centro\ hasta\ el\ punto\ donde\ comienza\ el\ puente.\r\n
comment17.params=color\ distance
comment17.target=void\ relocateBridgeAutomatico(java.lang.String,\ float)
comment17.text=\r\n\ Relocaliza\ autom\u00E1ticamente\ un\ puente\ en\ un\ brazo\ espec\u00EDfico\ de\ la\ red\ de\ telara\u00F1a.\r\n
comment18.params=color
comment18.target=boolean\ delBridge(java.lang.String)
comment18.text=\r\n\ Elimina\ un\ puente\ de\ la\ red\ de\ telara\u00F1a.\r\n\r\n\ @param\ color\ El\ color\ del\ puente\ que\ se\ desea\ eliminar.\r\n
comment19.params=color\ strand
comment19.target=void\ addSpot(java.lang.String,\ int)
comment19.text=\r\n\ Agrega\ un\ spot\ a\ la\ red\ de\ telara\u00F1a.\r\n\r\n\ @param\ color\ \ El\ color\ del\ punto\ de\ referencia.\r\n\ @param\ strand\ El\ n\u00FAmero\ del\ brazo\ donde\ se\ agregar\u00E1\ el\ punto\ de\ referencia.\r\n
comment2.params=strand\ favoritestrand\ bridgesData
comment2.target=SpiderWeb(int,\ int,\ int[][])
comment2.text=\r\n\ This\ is\ a\ constructor\ for\ the\ SpiderWeb\ class.\r\n\ It\ creates\ a\ new\ SpiderWeb\ object\ with\ a\ specified\ number\ of\ strands,\ a\ favorite\ strand,\ and\ an\ array\ of\ bridge\ data.\r\n\ Each\ bridge\ is\ represented\ by\ an\ array\ of\ two\ integers,\ where\ the\ first\ integer\ is\ the\ distance\ of\ the\ bridge\ from\ the\ center\ of\ the\ web,\r\n\ and\ the\ second\ integer\ is\ the\ strand\ number\ where\ the\ bridge\ starts.\r\n\ The\ constructor\ also\ adds\ a\ spot\ at\ the\ favorite\ strand.\r\n\r\n\ @param\ strand\ The\ number\ of\ strands\ in\ the\ spider\ web.\r\n\ @param\ favoritestrand\ The\ strand\ number\ where\ a\ spot\ will\ be\ added.\r\n\ @param\ bridgesData\ A\ 2D\ array\ containing\ the\ data\ for\ each\ bridge\ to\ be\ added\ to\ the\ spider\ web.\r\n
comment20.params=spot\ color\ type
comment20.target=void\ distintive1(Spot,\ java.lang.String,\ java.lang.String)
comment21.params=type\ color\ strand
comment21.target=void\ addSpot(java.lang.String,\ java.lang.String,\ int)
comment21.text=\r\n\ Agrega\ un\ tipo\ spot\ a\ la\ red\ de\ telara\u00F1a.\r\n\r\n\ @param\ color\ \ El\ color\ del\ punto\ de\ referencia.\r\n\ @param\ strand\ El\ n\u00FAmero\ del\ brazo\ donde\ se\ agregar\u00E1\ el\ punto\ de\ referencia.\r\n\ @param\ type\ \ \ El\ tipo\ de\ spot\ que\ se\ desea\ agregar.\r\n
comment22.params=color\ strand\ showMessage
comment22.target=boolean\ verifySpot(java.lang.String,\ int,\ boolean)
comment22.text=\r\n\ This\ method\ is\ used\ to\ verify\ if\ a\ spot\ can\ be\ added\ to\ the\ spider\ web.\r\n\ It\ checks\ if\ a\ spot\ of\ the\ same\ color\ already\ exists,\ if\ the\ strand\ number\ is\ valid,\ and\ if\ there\ is\ already\ a\ spot\ on\ the\ same\ strand.\r\n\ If\ any\ of\ these\ checks\ fail,\ the\ method\ returns\ false,\ indicating\ that\ the\ spot\ cannot\ be\ added.\r\n\ If\ all\ checks\ pass,\ the\ method\ returns\ true,\ indicating\ that\ the\ spot\ can\ be\ added.\r\n\r\n\ @param\ color\ The\ color\ of\ the\ spot\ to\ be\ added.\r\n\ @param\ strand\ The\ strand\ number\ where\ the\ spot\ will\ be\ added.\r\n\ @param\ showMessage\ A\ boolean\ flag\ indicating\ if\ a\ message\ should\ be\ shown\ when\ a\ check\ fails.\r\n\ @return\ A\ boolean\ value\ indicating\ if\ the\ spot\ can\ be\ added\ (true)\ or\ not\ (false).\r\n
comment23.params=
comment23.target=void\ typeSpot()
comment23.text=\r\n\ This\ method\ is\ used\ to\ handle\ different\ types\ of\ spots\ in\ the\ spider\ web.\r\n\ Depending\ on\ the\ type\ of\ the\ spot,\ it\ performs\ different\ actions.\r\n\ For\ a\ "bouncy"\ spot,\ it\ moves\ the\ spider\ to\ the\ next\ strand\ and\ recursively\ calls\ the\ method\ until\ a\ non-bouncy\ spot\ is\ encountered.\r\n\ For\ a\ "killer"\ spot,\ it\ kills\ the\ spider\ and\ makes\ it\ invisible.\r\n\ For\ a\ "break"\ spot,\ it\ deletes\ the\ spot\ and\ makes\ all\ the\ lines\ in\ the\ path\ visible.\r\n
comment24.params=color
comment24.target=void\ delSpot(java.lang.String)
comment24.text=\r\n\ Elimina\ un\ punto\ de\ referencia\ de\ la\ red\ de\ telara\u00F1a.\r\n\r\n\ @param\ color\ El\ color\ del\ punto\ de\ referencia\ que\ se\ desea\ eliminar.\r\n
comment25.params=
comment25.target=void\ hideBridges()
comment25.text=\r\n\ Oculta\ todos\ los\ puentes\ de\ la\ red\ de\ telara\u00F1a.\r\n
comment26.params=
comment26.target=void\ showBridges()
comment26.text=\r\n\ Muestra\ todos\ los\ puentes\ de\ la\ red\ de\ telara\u00F1a.\r\n
comment27.params=strand
comment27.target=void\ spiderSit(int)
comment27.text=\r\n\ Hace\ que\ la\ ara\u00F1a\ se\ siente\ en\ un\ brazo\ espec\u00EDfico\ de\ la\ telara\u00F1a.\r\n\r\n\ @param\ strand\ El\ n\u00FAmero\ del\ brazo\ donde\ se\ desea\ que\ la\ ara\u00F1a\ se\ siente.\r\n
comment28.params=advance
comment28.target=void\ spiderWalk(boolean)
comment28.text=\r\n\ Hace\ que\ la\ ara\u00F1a\ camine\ a\ lo\ largo\ del\ brazo\ de\ la\ telara\u00F1a.\r\n\r\n\ @param\ advance\ Indica\ si\ la\ ara\u00F1a\ debe\ avanzar\ en\ el\ brazo\ o\ retroceder.\r\n
comment29.params=walk\ xAnterior\ yAnterior
comment29.target=void\ spidermove(java.util.ArrayList,\ float,\ float)
comment29.text=\r\n\ This\ method\ is\ used\ to\ move\ the\ spider\ along\ a\ path\ in\ the\ spider\ web.\r\n\ It\ iterates\ over\ a\ list\ of\ points\ that\ represent\ the\ path,\ and\ for\ each\ point,\ it\ creates\ a\ line\ from\ the\ previous\ point\ to\ the\ current\ point.\r\n\ It\ then\ changes\ the\ color\ of\ the\ line\ to\ blue\ and\ makes\ it\ visible\ if\ the\ spider\ web\ is\ visible.\r\n\ The\ line\ is\ added\ to\ the\ 'recorrido'\ list\ which\ keeps\ track\ of\ the\ path\ that\ the\ spider\ has\ taken.\r\n\ After\ each\ iteration,\ the\ current\ point\ becomes\ the\ previous\ point\ for\ the\ next\ iteration.\r\n\r\n\ @param\ walk\ An\ ArrayList\ of\ ArrayLists\ of\ Floats,\ where\ each\ inner\ ArrayList\ represents\ a\ point\ on\ the\ path\ and\ contains\ the\ x\ and\ y\ coordinates\ of\ the\ point.\r\n\ @param\ xAnterior\ The\ x\ coordinate\ of\ the\ previous\ point\ on\ the\ path.\r\n\ @param\ yAnterior\ The\ y\ coordinate\ of\ the\ previous\ point\ on\ the\ path.\r\n
comment3.params=
comment3.target=void\ cordenates()
comment3.text=\r\n\ Calcula\ las\ coordenadas\ de\ los\ brazos\ de\ la\ telara\u00F1a\ y\ crea\ l\u00EDneas\ para\ representarlos.\r\n
comment30.params=
comment30.target=void\ eraseRecorrido()
comment31.params=listBrigde\ strand\ xSpiderActual\ ySpiderActual
comment31.target=java.util.Map\ nextBridge(java.util.ArrayList,\ int,\ float,\ float)
comment31.text=\r\n\ This\ method\ is\ used\ to\ find\ the\ next\ bridge\ on\ a\ given\ strand\ that\ the\ spider\ can\ move\ to.\r\n\ It\ iterates\ over\ a\ list\ of\ bridges\ on\ the\ strand,\ and\ for\ each\ bridge,\ it\ calculates\ the\ distance\ from\ the\ center\ of\ the\ web\ to\ the\ bridge.\r\n\ If\ the\ distance\ to\ the\ bridge\ is\ greater\ than\ the\ current\ distance\ of\ the\ spider\ and\ the\ difference\ between\ the\ two\ distances\ is\ less\ than\ the\ minimum\ difference\ found\ so\ far,\r\n\ it\ updates\ the\ minimum\ difference\ and\ sets\ the\ bridge\ as\ the\ next\ bridge\ to\ move\ to.\r\n\ After\ iterating\ over\ all\ bridges,\ it\ adds\ a\ key-value\ pair\ to\ a\ map\ where\ the\ key\ is\ a\ boolean\ indicating\ if\ a\ next\ bridge\ was\ found\ and\ the\ value\ is\ the\ next\ bridge.\r\n\ If\ no\ next\ bridge\ was\ found,\ the\ value\ is\ a\ default\ bridge\ with\ no\ properties.\r\n\r\n\ @param\ listBrigde\ An\ ArrayList\ of\ Bridges\ representing\ the\ bridges\ on\ the\ strand.\r\n\ @param\ strand\ The\ strand\ number\ where\ the\ spider\ is\ currently\ located.\r\n\ @param\ xSpiderActual\ The\ current\ x\ coordinate\ of\ the\ spider.\r\n\ @param\ ySpiderActual\ The\ current\ y\ coordinate\ of\ the\ spider.\r\n\ @return\ A\ Map\ where\ the\ key\ is\ a\ Boolean\ indicating\ if\ a\ next\ bridge\ was\ found\ and\ the\ value\ is\ the\ next\ bridge\ (if\ found)\ or\ a\ default\ bridge\ (if\ not\ found).\r\n
comment32.params=listBrigde\ strand\ xSpiderActual\ ySpiderActual
comment32.target=java.util.Map\ nextBridge1(java.util.ArrayList,\ int,\ float,\ float)
comment33.params=strand
comment33.target=java.util.ArrayList\ isPosible(int)
comment34.params=strand
comment34.target=java.util.ArrayList\ isPosible1(int)
comment35.params=
comment35.target=java.util.ArrayList\ reachableSpot()
comment35.text=\r\n\ Devuelve\ una\ lista\ de\ colores\ de\ los\ spots\ que\ son\ alcanzables\ desde\ la\ posici\u00F3n\ actual\ de\ la\ ara\u00F1a\ en\ la\ telara\u00F1a.\r\n\r\n\ @return\ Una\ lista\ de\ cadenas\ que\ representan\ los\ colores\ de\ los\ spots\ alcanzables\ desde\ la\ posici\u00F3n\ actual\ de\ la\ ara\u00F1a.\r\n
comment36.params=
comment36.target=java.lang.String[]\ bridges()
comment36.text=\r\n\ Devuelve\ una\ lista\ de\ los\ colores\ de\ los\ puentes\ en\ la\ red\ de\ telara\u00F1a.\r\n\r\n\ @return\ Una\ lista\ de\ los\ colores\ de\ los\ puentes.\r\n
comment37.params=
comment37.target=java.lang.String[]\ spots()
comment37.text=\r\n\ Devuelve\ una\ lista\ de\ los\ colores\ de\ los\ spots\ en\ la\ red\ de\ telara\u00F1a.\r\n\r\n\ @return\ Una\ lista\ de\ los\ colores\ de\ los\ spots.\r\n
comment38.params=color
comment38.target=int\ spot(java.lang.String)
comment38.text=\r\n\ Devuelve\ el\ n\u00FAmero\ del\ brazo\ donde\ se\ encuentra\ un\ punto\ de\ referencia\ dado\ su\ color.\r\n\r\n\ @param\ color\ El\ color\ del\ punto\ de\ referencia.\r\n\ @return\ El\ n\u00FAmero\ del\ brazo\ donde\ se\ encuentra\ el\ punto\ de\ referencia,\r\n
comment39.params=color
comment39.target=int[]\ bridge(java.lang.String)
comment39.text=\r\n\ Retorna\ una\ lista\ de\ hilos\ (strands)\ en\ los\ cuales\ se\ encuentra\ un\ puente\ dado\ su\ color.\r\n\r\n\ @param\ color\ El\ color\ del\ puente.\r\n\ @return\ Una\ lista\ de\ enteros\ que\ representan\ los\ hilos\ donde\ se\ encuentra\ el\ puente.\r\n
comment4.params=
comment4.target=void\ makeVisible()
comment4.text=\r\n\ Hace\ visible\ la\ red\ de\ telara\u00F1a\ y\ todos\ los\ elementos.\r\n\ Si\ la\ red\ no\ ha\ sido\ visible\ antes,\ muestra\ las\ l\u00EDneas\ de\ los\ brazos\r\n\ y\ una\ ara\u00F1a\ en\ el\ centro.\ Si\ ya\ ha\ sido\ visible,\ simplemente\ hace\ visible\r\n\ nuevamente\ los\ elementos.\r\n
comment40.params=
comment40.target=void\ addStrand()
comment40.text=\r\n\ Agrega\ un\ nuevo\ brazo\ a\ la\ red\ de\ telara\u00F1a.\r\n\ <p>\r\n\ Este\ m\u00E9todo\ incrementa\ el\ n\u00FAmero\ de\ brazos\ en\ la\ red\ de\ telara\u00F1a,\ recalcula\ las\ coordenadas\r\n\ de\ los\ brazos\ con\ el\ nuevo\ n\u00FAmero\ de\ brazos\ y\ hace\ visible\ nuevamente\ la\ red\ de\ telara\u00F1a.\r\n
comment41.params=porcentage
comment41.target=boolean\ enlarge(int)
comment41.text=\r\n\ Aumenta\ el\ tama\u00F1o\ de\ la\ red\ de\ telara\u00F1a\ seg\u00FAn\ un\ porcentaje\ dado.\r\n\r\n\ @param\ porcentage\ El\ porcentaje\ por\ el\ cual\ se\ aumentar\u00E1\ el\ tama\u00F1o\ de\ la\ red.\r\n
comment42.params=
comment42.target=java.lang.String[]\ unUsedBridges()
comment42.text=\r\n\ Devuelve\ una\ lista\ de\ puentes\ sin\ usar\ en\ la\ red\ de\ telara\u00F1a.\r\n\r\n\ @return\ Una\ lista\ de\ cadenas\ que\ representan\ los\ colores\ de\ los\ puentes\ sin\ usar.\r\n
comment43.params=
comment43.target=int[]\ spiderLastPath()
comment43.text=\r\n\ Obtiene\ el\ listado\ de\ los\ hilos\ tomados\ por\ la\ ara\u00F1a\ la\ \u00FAltima\ vez\ que\ camin\u00F3.\r\n\r\n\ @return\ Una\ lista\ de\ enteros\ que\ representan\ los\ n\u00FAmeros\ de\ los\ brazos\ tomados\ por\ la\ ara\u00F1a.\r\n
comment44.params=
comment44.target=void\ finish()
comment44.text=\r\n\ Finaliza\ la\ clase\ y\ realiza\ las\ operaciones\ necesarias\ para\ limpiar\ los\ datos\ y\ hacer\ invisible\ la\ telara\u00F1a\ y\ la\ ara\u00F1a.\r\n\ Cierra\ la\ ventana.\r\n
comment45.params=
comment45.target=boolean\ ok()
comment45.text=\r\n\ Devuelve\ el\ estado\ de\ los\ metodos.\r\n\r\n\ @return\ {@code\ true}\ si\ la\ ara\u00F1a\ est\u00E1\ en\ un\ estado\ v\u00E1lido\ para\ continuar\ con\ las\ operaciones,\r\n\ {@code\ false}\ de\ lo\ contrario.\r\n
comment46.params=
comment46.target=int\ getRadio()
comment46.text=\r\n\ This\ method\ is\ used\ to\ get\ the\ radius\ of\ the\ spider\ web.\r\n\ The\ radius\ is\ the\ distance\ from\ the\ center\ of\ the\ web\ to\ the\ outermost\ strand.\r\n\r\n\ @return\ The\ radius\ of\ the\ spider\ web.\r\n
comment47.params=
comment47.target=boolean\ isSpiderLive()
comment47.text=\r\n\ This\ method\ is\ used\ to\ check\ if\ the\ spider\ is\ alive.\r\n\ If\ the\ spider\ is\ alive,\ it\ can\ move\ along\ the\ strands\ and\ bridges\ of\ the\ spider\ web.\r\n\ If\ the\ spider\ is\ not\ alive,\ it\ cannot\ move.\r\n\r\n\ @return\ A\ boolean\ value\ indicating\ if\ the\ spider\ is\ alive\ (true)\ or\ not\ (false).\r\n
comment48.params=
comment48.target=int\ getStrandFinish()
comment48.text=\r\n\ This\ method\ is\ used\ to\ get\ the\ strand\ number\ where\ the\ spider\ finished\ its\ last\ move.\r\n\ The\ strand\ number\ is\ incremented\ by\ 1\ before\ being\ returned\ because\ the\ internal\ representation\ of\ strands\ starts\ from\ 0,\r\n\ but\ for\ the\ user,\ strands\ are\ numbered\ starting\ from\ 1.\r\n\r\n\ @return\ The\ strand\ number\ where\ the\ spider\ finished\ its\ last\ move,\ incremented\ by\ 1.\r\n
comment5.params=
comment5.target=void\ makeInvisible()
comment5.text=\r\n\ Hace\ invisible\ la\ red\ de\ telara\u00F1a\ y\ todos\ los\ elementos.\r\n\ Oculta\ todas\ las\ l\u00EDneas\ y\ los\ puentes\ de\ la\ red\ de\ telara\u00F1a.\r\n
comment6.params=color\ distance\ firstStrand
comment6.target=void\ addBridge(java.lang.String,\ int,\ int)
comment6.text=\r\n\ Agrega\ un\ puente\ a\ la\ red\ de\ telara\u00F1a.\r\n\r\n\ @param\ color\ \ \ \ \ \ \ El\ color\ del\ puente.\r\n\ @param\ distance\ \ \ \ La\ distancia\ desde\ el\ centro\ hasta\ el\ punto\ donde\ comienza\ el\ puente.\r\n\ @param\ firstStrand\ El\ n\u00FAmero\ del\ brazo\ donde\ se\ conectar\u00E1\ el\ puente.\r\n
comment7.params=type\ color\ distance\ firstStrand
comment7.target=void\ addBridge(java.lang.String,\ java.lang.String,\ int,\ int)
comment7.text=\r\n\ This\ method\ is\ used\ to\ add\ a\ bridge\ to\ the\ spider\ web.\r\n\ It\ first\ sets\ the\ type\ of\ the\ bridge,\ then\ verifies\ if\ the\ bridge\ can\ be\ added.\r\n\ If\ the\ bridge\ can\ be\ added,\ it\ adds\ the\ bridge\ and\ sets\ the\ status\ to\ true.\r\n\ If\ the\ bridge\ cannot\ be\ added,\ it\ sets\ the\ status\ to\ false.\r\n\ After\ the\ operation,\ it\ resets\ the\ type\ of\ the\ bridge\ to\ an\ empty\ string.\r\n\r\n\ @param\ type\ The\ type\ of\ the\ bridge\ to\ be\ added.\r\n\ @param\ color\ The\ color\ of\ the\ bridge\ to\ be\ added.\r\n\ @param\ distance\ The\ distance\ from\ the\ center\ of\ the\ web\ to\ the\ start\ of\ the\ bridge.\r\n\ @param\ firstStrand\ The\ strand\ number\ where\ the\ bridge\ starts.\r\n
comment8.params=bridge\ color
comment8.target=void\ distintive(Bridges,\ java.lang.String)
comment8.text=\r\n\ This\ method\ is\ used\ to\ add\ distinctive\ features\ to\ a\ bridge\ based\ on\ its\ type.\r\n\ It\ creates\ a\ number\ of\ circles\ on\ the\ bridge\ based\ on\ the\ bridge\ type.\r\n\ The\ circles\ are\ added\ to\ an\ ArrayList\ and\ stored\ in\ a\ map\ with\ the\ bridge\ as\ the\ key.\r\n\ The\ value\ in\ the\ map\ is\ a\ List\ of\ Objects,\ where\ the\ first\ object\ is\ the\ bridge\ type\ and\ the\ second\ object\ is\ the\ ArrayList\ of\ circles.\r\n\r\n\ @param\ bridge\ The\ bridge\ to\ which\ the\ distinctive\ features\ are\ to\ be\ added.\r\n\ @param\ color\ The\ color\ of\ the\ distinctive\ features.\r\n
comment9.params=istypebridge
comment9.target=void\ TypeBridge(boolean)
comment9.text=\r\n\ This\ method\ is\ used\ to\ handle\ different\ types\ of\ bridges\ in\ the\ spider\ web.\r\n\ Depending\ on\ the\ type\ of\ the\ bridge,\ it\ performs\ different\ actions.\r\n\ For\ a\ "transformer"\ bridge,\ it\ adds\ a\ spot\ at\ the\ start\ of\ the\ bridge.\r\n\ For\ a\ "weak"\ bridge,\ it\ deletes\ the\ bridge.\r\n\ For\ a\ "mobile"\ bridge,\ it\ moves\ the\ bridge\ to\ a\ new\ location.\r\n\r\n\ @param\ istypebridge\ A\ boolean\ flag\ indicating\ if\ the\ bridge\ is\ of\ a\ specific\ type.\r\n
numComments=49
